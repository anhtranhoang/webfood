{"version":3,"sources":["../node_modules/require_optional sync","logo.svg","App.js","serviceWorker.js","Pages/login_page/LogIn.js","login.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","App","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","Modal","setAppElement","document","getElementById","ModalStaffLogin","props","staffLogin","setState","staffLoggedIn","MongoClient","require","url","state","modalIsOpen","value","PIN","comfirm","openMongoDB","bind","openModal","handleChange","handleSubmit","this","connect","err","db","console","log","dbo","collection","findOne","result","alert","name","close","event","preventDefault","confirm","to","pathname","class","onSubmit","type","onChange","placeholder","required","React","Component","LogInPage","ReactDOM","render","path","exact","component","Login","DeclareInfor","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uFAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,oBCRzBF,EAAOC,QAAU,IAA0B,kC,qhBCyB5BE,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qECZNC,IAAMC,cAAcC,SAASC,eAAe,S,IAEvBC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA6CVC,WAAa,WACT,EAAKC,SAAS,CAACC,eAAe,KA7C9B,EAAKC,YAAcC,EAAQ,KAAWD,YACtC,EAAKE,IAAM,6BACX,EAAKC,MAAQ,CACTC,aAAa,EACbL,eAAe,EACfM,MAAO,GACPC,IAAK,OACLC,SAAS,GAEb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBAdL,E,0DAkBfI,KAAKb,YAAYc,QAAQD,KAAKX,KAAK,SAASa,EAAKC,GAE7C,GADAC,QAAQC,IAAI,UACRH,EAAK,MAAMA,EACfF,KAAKM,IAAMH,EAAGA,GAAG,QACjBH,KAAKM,IAAIC,WAAW,aAAaC,QAAQ,IAAI,SAASN,EAAKO,GACzD,GAAIP,EAAK,MAAMA,EACfQ,MAAMD,EAAOE,MACbR,EAAGS,cAGTR,QAAQC,IAAI,U,kCAGZL,KAAKf,SAAS,CAACM,aAAa,M,mCAEnBsB,GACTb,KAAKf,SAAS,CAACO,MAAOqB,EAAM1C,OAAOqB,U,mCAG1BqB,GACTA,EAAMC,iBACFd,KAAKV,MAAME,QAAUQ,KAAKV,MAAMG,IAChCO,KAAKf,SAAS,CAAC8B,SAAS,IAExBL,MAAM,mB,+BASV,OAAIV,KAAKV,MAAMyB,QACJ,kBAAC,IAAD,CAAUC,GAAM,CAACC,SAAU,mBAGlC,yBAAKC,MAAQ,SACT,yBAAKA,MAAM,SACH,qCACA,0BAAMC,SAAYnB,KAAKD,cACnB,2BAAOqB,KAAK,OAAOT,KAAK,IAAInB,MAASQ,KAAKV,MAAME,MAAO6B,SAAYrB,KAAKF,aAAcwB,YAAY,YAAYC,SAAS,aACvH,4BAAQH,KAAK,SAASF,MAAM,uCAA5B,YAGZ,yBAAKA,MAAQ,QAGb,yBAAKA,MAAQ,OACT,oC,GApEyBM,IAAMC,WCJ9BC,E,uKAGb,OACI,6BACI,kBAAC,EAAD,CAAO9D,GAAK,2B,GALW4D,IAAMC,WCM7CE,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAO,IAAIC,OAAK,EAACC,UAAaC,IACrC,kBAAC,IAAD,CAAOH,KAAO,gBAAgBC,OAAK,EAACC,UAAaE,KAEvDrD,SAASC,eAAe,SHoHpB,kBAAmBqD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.524c87a9.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 115;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport Modal from 'react-modal';\nimport './LogIn.css';\n\n\nModal.setAppElement(document.getElementById('root'));\n\nexport default class ModalStaffLogin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.MongoClient = require('mongodb').MongoClient;\n        this.url = \"mongodb://localhost:27017/\";\n        this.state = {\n            modalIsOpen: true,\n            staffLoggedIn: false,\n            value: '',\n            PIN: '1234',\n            comfirm: false,\n        };\n        this.openMongoDB = this.openMongoDB.bind(this);\n        this.openModal = this.openModal.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    openMongoDB(){\n        this.MongoClient.connect(this.url, function(err, db) {\n            console.log(\"concac\");\n            if (err) throw err;\n            this.dbo = db.db(\"mydb\");\n            this.dbo.collection(\"customers\").findOne({}, function(err, result) {\n              if (err) throw err;\n              alert(result.name);\n              db.close();\n            });\n          });\n        console.log(\"clgt\");\n    }\n    openModal() {\n        this.setState({modalIsOpen: true});\n    }\n    handleChange(event) {\n        this.setState({value: event.target.value});\n    }\n\n    handleSubmit(event) {\n        event.preventDefault();\n        if (this.state.value === this.state.PIN) {\n            this.setState({confirm: true});\n        } else {\n            alert('Incorrect PIN');\n        }\n    }\n\n    staffLogin = () => {\n        this.setState({staffLoggedIn: true});\n    }\n\n    render() {\n        if (this.state.confirm) {\n            return <Redirect to = {{pathname: '/DeclareInfor'}} />\n        }\n        return (\n            <div class = \"login\">\n                <div class=\" row \">               \n                        <h1>Login</h1>\n                        <form onSubmit = {this.handleSubmit}>\n                            <input type=\"text\" name=\"u\" value = {this.state.value} onChange = {this.handleChange} placeholder=\"User Mail\" required=\"required\" />\n                            <button type=\"submit\" class=\"btn btn-primary btn-block btn-large\">Log In</button>\n                        </form>              \n                </div>\n                <div class = \"row\">\n\n                </div>\n                <div class = \"row\">\n                    <div >\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\n\nimport Login from './Pages/login_page/LogIn';\n\nexport default class LogInPage extends React.Component {\n\n    render () {\n        return(\n            <div>\n                <Login id = \"modal-staff-login\"/>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './index.css';\nimport DeclareInfor from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//Pages\nimport Login from './login'\n\nReactDOM.render(\n    <Router>\n        <Route path = '/' exact component = {Login}/>\n        <Route path = '/DeclareInfor' exact component = {DeclareInfor}/>\n    </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}